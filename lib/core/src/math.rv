import numbers;

/// Priorities: Priorities work on powers of 10 to allow for "subcategories" between the main defined categories
/// 1000 - Single Value Operations
/// 100 - Multiplication/Division
/// 10 - Addition/Subtraction
/// 0 - Equality Operators
/// -10 - Bitwise/Logical Operators
/// -100 - Assignment
#[priority(0)]
#[operation({}=={})]
trait Equal<T> {
    fn equal(self, other: T) -> bool;
}


#[priority(0)]
#[operation({}>{})]
trait GreaterThan<T> {
    fn greater_than(self, other: T) -> bool;
}

#[priority(0)]
#[operation({}<{})]
trait LessThan<T> {
    fn less_than(self, other: T) -> bool;
}

#[priority(0)]
#[operation({}<={})]
trait LessOrEqual<T> {
    fn less_or_equal(self, other: T) -> bool;
}

#[priority(0)]
#[operation({}>={})]
trait GreaterOrEqual<T> {
    fn greater_or_equal(self, other: T) -> bool;
}

#[priority(0)]
#[operation({}!={})]
trait NotEqual<T> {
    fn not_equal(self, other: T) -> bool;
}

#[priority(1000)]
#[operation(!{})]
trait Not<T> {
    fn not(self) -> T;
}

#[priority(10)]
#[operation({}+{})]
trait Add<E, C> {
    fn add(self, other: E) -> C;
}

#[priority(-100)]
#[operation({}+={})]
trait AddAndAssign<E, C> {
    fn add_assign(self, other: E) -> C;
}

#[priority(10)]
#[operation({}-{})]
trait Subtract<E, C> {
    fn subtract(self, other: E) -> C;
}

#[priority(-100)]
#[operation({}-={})]
trait SubtractAndAssign<E, C> {
    fn subtract_assign(self, other: E) -> C;
}

#[priority(100)]
#[operation({}*{})]
trait Multiply<E, C> {
    fn multiply(self, other: E) -> C;
}

#[priority(-100)]
#[operation({}*={})]
trait MultiplyAndAssign<E, C> {
    fn multiply_assign(self, other: E) -> C;
}

#[priority(100)]
#[operation({}/{})]
trait Divide<E, C> {
    fn divide(self, other: E) -> C;
}

#[priority(-100)]
#[operation({}/={})]
trait DivideAndAssign<E, C> {
    fn divide_assign(self, other: E) -> C;
}

#[priority(100)]
#[operation({}%{})]
trait Remainder<E, C> {
    fn remainder(self, other: E) -> C;
}

#[priority(0)]
#[operation({}&{})]
trait BitAnd<E, C> {
    fn bit_and(self, other: E) -> C;
}

#[priority(-1)]
#[operation({}^{})]
trait BitXOR<E, C> {
    fn bit_xor(self, other: E) -> C;
}

#[priority(-2)]
#[operation({}|{})]
trait BitOr<E, C> {
    fn bit_or(self, other: E) -> C;
}

#[priority(10)]
#[operation({}%={})]
trait RemainderAndAssign<E, C> {
    fn remainder_assign(self, other: E) -> C;
}

//Basic math operations, implemented internally by the compiler.
pub internal impl<T: Number, E: Number> Equal<E> for T {
    fn equal(self, other: E) -> bool {

    }
}

pub impl<T: Equal<E>, E> NotEqual<E> for T {
    fn not_equal(self, other: E) -> bool {
        let temp = 0;
        return !(self.equal(other));
    }
}

pub internal impl Not<bool> for bool {
    fn not(self) -> bool {

    }
}

//Basic math operations, implemented internally by the compiler.
pub internal impl<T: Number> Add<T, T> for T {
    fn add(self, other: T) -> T {

    }
}
pub impl<T: Add<E, T>, E> AddAndAssign<E, T> for T {
    fn add_assign(self, other: E) -> T {
        self = self.add(other);
        return self;
    }
}

//Basic math operations, implemented internally by the compiler.
pub internal impl<T: Number> Subtract<T, T> for T {
    fn subtract(self, other: T) -> T {

    }
}

pub impl<T: Subtract<E, T>, E> SubtractAndAssign<E, T> for T {
    fn subtract_assign(self, other: E) -> T {
        self = self.subtract(other);
        return self;
    }
}

//Basic math operations, implemented internally by the compiler.
pub internal impl<T: Number> Multiply<T, T> for T {
    fn multiply(self, other: T) -> T {

    }
}

pub impl<T: Multiply<E, T>, E> MultiplyAndAssign<E, T> for T {
    fn multiply_assign(self, other: E) -> T {
        self = self.multiply(other);
        return self;
    }
}

pub internal impl<T: Number> BitOr<T, T> for T {
    fn bit_or(self, other: T) -> T {

    }
}

pub internal impl<T: Number> BitAnd<T, T> for T {
    fn bit_and(self, other: T) -> T {

    }
}

pub internal impl<T: Number> BitXOR<T, T> for T {
    fn bit_xor(self, other: T) -> T {

    }
}

//Basic math operations, implemented internally by the compiler.
pub internal impl<T: Number> Divide<T, T> for T {
    fn divide(self, other: T) -> T {

    }
}

pub impl<T: Divide<E, T>, E> DivideAndAssign<E, T> for T {
    fn divide_assign(self, other: E) -> T {
        self = self.divide(other);
        return self;
    }
}

//Basic math operations, implemented internally by the compiler.
pub internal impl<T: Number> Remainder<T, T> for T {
    fn remainder(self, other: T) -> T {

    }
}

pub impl<T: Remainder<E, T>, E> RemainderAndAssign<E, T> for T {
    fn remainder_assign(self, other: E) -> T {
        self = self.remainder(other);
        return self;
    }
}

pub internal impl<T: Number, E: Number> GreaterThan<E> for T {
    fn greater_than(self, other: E) -> bool {

    }
}

pub internal impl<T: Number, E: Number> LessThan<E> for T {
    fn less_than(self, other: E) -> bool {

    }
}


pub impl<T: GreaterThan<Number>, E: Number> LessOrEqual<E> for T {
    fn less_or_equal(self, other: E) -> bool {
        return !(self.greater_than(other));
   }
}
pub impl<T: LessThan<Number>, E: Number> GreaterOrEqual<E> for T {
    fn greater_or_equal(self, other: E) -> bool {
        return !(self.less_than(other));
    }
}