//A trait for every primitive number type.
pub trait Number {}

//Primitive numbers, prefixed by signed/unsigned, suffixed by the amount of bits.
//Signed types
pub internal struct i64 {}
impl Number for i64 {}
pub internal struct i32 {}
impl Number for i32 {}
pub internal struct i16 {}
impl Number for i16 {}
pub internal struct i8 {}
impl Number for i8 {}

//Unsigned types
pub internal struct u64 {}
impl Number for u64 {}
pub internal struct u32 {}
impl Number for u32 {}
pub internal struct u16 {}
impl Number for u16 {}
pub internal struct u8 {}
impl Number for u8 {}

//Booleans, either true or false (1 or 0)
pub internal struct bool {}
impl Number for bool {}

trait Cast<T> {
    fn cast(self) -> T;
}

pub internal impl<T: Number, E: Number> Cast<T> for E {
    pub fn cast(self) -> T {

    }
}

#[operation([{+}])]
trait Array<T> {
    fn instance(self) -> T;
}

pub impl<T> Array<T> for [T] {
    fn instance(self) -> T {
        return self;
    }
}

#[operation({}[{}])]
trait Index<T> {
    fn index(self, index: u64) -> T;
}

pub internal impl<T> Index<T> for [T] {
    fn index(self, index: u64) -> T {}
}

#[priority(-1)]
#[operation({}=={})]
trait Equal<T> {
    fn equal(self, other: T) -> bool;
}

//Basic math operations, implemented internally by the compiler.
pub internal impl<T: Number, E: Number> Equal for E {
    fn equal(self, other: T) -> bool {

    }
}