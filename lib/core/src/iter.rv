pub trait Iter<T> {
    pub fn next(self) -> T;

    pub fn has_next(self) -> bool;
}

pub struct NumberIter {
    pub current: u64;
    pub end: u64;
}

impl Iter<u64> for NumberIter {
    pub fn next(self) -> u64 {
        return self.current;
    }

    pub fn has_next(self) -> bool {
        return false;
    }
}

#[priority(-1)]
#[operation({}..{})]
trait Range<T> {
    fn range(self, other: T) -> Iter<T>;
}

impl Range<u64> for u64 {
    fn range(self, other: u64) -> Iter<u64> {
        return new NumberIter {
            current: self,
            end: other,
        };
    }
}